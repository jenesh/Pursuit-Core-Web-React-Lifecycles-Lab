{"version":3,"sources":["Components/AddTodo.jsx","Components/Todo.jsx","Components/Todos.jsx","Components/counter.js","App.js","serviceWorker.js","index.js"],"names":["AddTodo","props","getBaseState","completed","dueDate","task","handleSubmit","e","preventDefault","state","addTodo","setState","console","dir","target","value","Date","toISOString","substring","handleChange","name","baseState","onSubmit","this","htmlFor","type","placeholder","autoFocus","onChange","disblaed","disabled","Component","Todo","toast","todos","deleteTodo","toggleCompleted","changeDueDate","key","id","onClick","React","Todos","todoArr","map","todo","counter","App","log","filter","date","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65979700.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\n\nclass AddTodo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = this.getBaseState();\n        this.baseState = this.state;\n    }\n    getBaseState = () => {\n        return {\n            completed: false,\n            dueDate: null,\n            task: null\n        }\n    }\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.state.dueDate = this.state.dueDate ? this.state.dueDate : 'None';\n        this.props.addTodo(this.state);\n        this.setState(this.getBaseState());\n        console.dir(e.target);\n        e.target[0].value = '';\n        e.target[1].value = new Date().toISOString().substring(0, 10);\n    }\n    handleChange = ({ target }) => {\n        this.setState({ [target.name]: target.value });\n    }\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <label htmlFor=\"task\">Todo: </label>\n                <input type=\"text\" name=\"task\" placeholder='Add a todo here..' autoFocus={true} onChange={this.handleChange} />\n                <br />\n                <label htmlFor=\"dueDate\">Due date: </label>\n                <input type=\"date\" name=\"dueDate\" placeholder='MM/DD/YYYY' onChange={this.handleChange} />\n                <br />\n                {this.state.task ? (\n                    <input type=\"submit\" value=\"Add Todo\" disblaed={false} />\n                ) : (\n                    <input type=\"submit\" value=\"Add Todo\" disabled={true} />\n                )}\n                < ToastContainer />\n            </form>\n        );\n    }\n}\n\nexport default AddTodo;","import React from 'react';\nimport { toast } from 'react-toastify'\n\nclass Todo extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        toast('Added: ' + this.props.todos.task);\n    }\n\n    componentWillUnmount() {\n        toast('Deleted: ' + this.props.todos.task);\n    }\n\n    render() {\n        const { todos, deleteTodo, toggleCompleted, changeDueDate } = this.props;\n\n        return (\n            <div key={todos.id}>\n                <p>{todos.task} </p>\n                <p>\n                    <span onClick={() => toggleCompleted(todos.id)}>Completed: {todos.completed ? '‚úÖ' : '‚ùå'} | </span>\n                    <span onClick={() => changeDueDate(todos.id)}>Due: üóì{todos.dueDate}</span>\n                </p>\n                <button onClick={() => deleteTodo(todos.id)}>Delete</button>\n            </div>\n        );\n    }\n}\n\nexport default Todo;","import React from 'react';\nimport Todo from './Todo';\n\nconst Todos = ({ todos, deleteTodo, toggleCompleted, changeDueDate }) => {\n    const todoArr = todos.map(todo => {\n        return (\n            < Todo\n                todos={todo}\n                deleteTodo={deleteTodo}\n                toggleCompleted={toggleCompleted}\n                changeDueDate={changeDueDate}\n            />\n        )\n    });\n    return (\n        <div>\n            {todoArr}\n        </div>\n    );\n}\n\nexport default Todos;","const counter = 0;\n\nexport default counter;","import React from 'react';\nimport './App.css';\nimport AddTodos from './Components/AddTodo';\nimport Todos from './Components/Todos';\nimport counter from './Components/counter'\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nclass App extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\ttodos: []\n\t\t};\n\t}\n\taddTodo = (todo) => {\n\t\tconsole.log(todo);\n\t\ttodo.id = counter;\n\t\tcounter++;\n\t\tthis.setState({ todos: [...this.state.todos, todo] });\n\t}\n\tdeleteTodo = (id) => {\n\t\tconst todos = this.state.todos.filter(todo => {\n\t\t\treturn todo.id !== id;\n\t\t})\n\t\tthis.setState({ todos });\n\t}\n\ttoggleCompleted = (id) => {\n\t\tconst todos = this.state.todos.map(todo => {\n\t\t\tif (todo.id === id) {\n\t\t\t\ttodo.completed = !todo.completed;\n\t\t\t\ttodo.completed ? toast('Completed: ' + todo.task) : toast('Not Completed: ' + todo.task);\n\t\t\t\treturn todo;\n\t\t\t} else {\n\t\t\t\treturn todo;\n\t\t\t}\n\t\t});\n\t\tthis.setState({ todos });\n\t}\n\tchangeDueDate = (date) => {\n\t\tconsole.log('This feature is under contruction.')\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<AddTodos addTodo={this.addTodo} />\n\t\t\t\t<Todos todos={this.state.todos} deleteTodo={this.deleteTodo} toggleCompleted={this.toggleCompleted} changeDueDate={this.changeDueDate} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}